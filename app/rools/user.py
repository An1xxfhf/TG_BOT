from aiogram.filters import Command
from aiogram.types import Message,CallbackQuery
from aiogram import Router,F
from aiogram.fsm.context import FSMContext
from aiogram.enums import ChatAction
import asyncio
import app.keyboards as kb
from app.states import State

from app.DB.requests import set_user,set_bir,get_birthdays,set_title,get_title
import aiohttp
from dotenv import load_dotenv
from datetime import datetime
import os

load_dotenv()
user = Router()

API_Weather = os.getenv('API_WEATHER')
commands = ['start','help','weather','settings','birthday','title']

@user.message(Command('start'))
async def start(message: Message):
    await set_user(message.from_user.id)
    await message.bot.send_chat_action(chat_id=message.from_user.id,action=ChatAction.TYPING)
    await asyncio.sleep(1)
    await message.answer(f"–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}üëã\n"
                          f"–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å, —á—Ç–æ –º–æ–∂–µ—Ç —ç—Ç–æ—Ç –±–æ—Ç –≤–≤–µ–¥–∏—Ç–µ <b>/help</b>",parse_mode='HTML',reply_markup=kb.main)

@user.message(Command('help'))
async def help(message: Message):
    await message.bot.send_chat_action(chat_id=message.from_user.id, action=ChatAction.TYPING)
    await asyncio.sleep(1)
    await message.answer(
        "<b>–í–æ—Ç —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥‚¨áÔ∏è</b>\n"
        "<b>/weather</b> - —É–∑–Ω–∞—Ç—å –ø–æ–≥–æ–¥—É –≤ –≥–æ—Ä–æ–¥–µ\n"
        "<b>/birthday</b> - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–Ω—è–º–∏ —Ä–æ–∂–¥–µ–Ω–∏—è\n"
        "<b>/title</b> - —Å–ø–∏—Å–æ–∫ –¥–µ–ª\n"
        "<b>/settings</b> - –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è",
        parse_mode="HTML")

@user.message(Command('weather'))
async def weather(message: Message,state: FSMContext):
    await message.bot.send_chat_action(chat_id=message.from_user.id, action=ChatAction.TYPING)
    await asyncio.sleep(1)
    await message.answer('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞: ')
    await state.set_state(State.location_weather)


@user.message(State.location_weather)
async def get_weather(message: Message, state: FSMContext):
    await message.bot.send_chat_action(
        chat_id=message.from_user.id,
        action=ChatAction.FIND_LOCATION
    )
    await asyncio.sleep(1)

    city = message.text.strip().lower()

    weather_translation = {
        "clear sky": "‚òÄ —è—Å–Ω–æ",
        "few clouds": "üå§ –Ω–µ–±–æ–ª—å—à–∞—è –æ–±–ª–∞—á–Ω–æ—Å—Ç—å",
        "scattered clouds": "‚õÖ –æ–±–ª–∞—á–Ω–æ —Å –ø—Ä–æ—è—Å–Ω–µ–Ω–∏—è–º–∏",
        "broken clouds": "‚òÅ –ø–∞—Å–º—É—Ä–Ω–æ",
        "overcast clouds": "‚òÅ —Å–ø–ª–æ—à–Ω–∞—è –æ–±–ª–∞—á–Ω–æ—Å—Ç—å",
        "mist": "üå´ –¥—ã–º–∫–∞",
        "fog": "üåÅ —Ç—É–º–∞–Ω",
        "light rain": "üå¶ –Ω–µ–±–æ–ª—å—à–æ–π –¥–æ–∂–¥—å",
        "moderate rain": "üåß —É–º–µ—Ä–µ–Ω–Ω—ã–π –¥–æ–∂–¥—å",
        "heavy rain": "‚õà —Å–∏–ª—å–Ω—ã–π –¥–æ–∂–¥—å",
        "light snow": "‚ùÑ –Ω–µ–±–æ–ª—å—à–æ–π —Å–Ω–µ–≥",
        "moderate snow": "‚ùÑ —É–º–µ—Ä–µ–Ω–Ω—ã–π —Å–Ω–µ–≥",
        "heavy snow": "‚ùÑ —Å–∏–ª—å–Ω—ã–π —Å–Ω–µ–≥",
        "thunderstorm": "‚ö° –≥—Ä–æ–∑–∞",
        "haze": "üå´ –º–≥–ª–∞",
        "smoke": "üí® —Å–º–æ–≥",
        "dust": "üí® –ø—ã–ª—å",
        "sand": "üí® –ø–µ—Å—á–∞–Ω–∞—è –±—É—Ä—è",
        "squalls": "üí® —à–∫–≤–∞–ª—ã",
        "tornado": "üå™ —Ç–æ—Ä–Ω–∞–¥–æ"
    }
    url = f"https://api.openweathermap.org/data/2.5/weather?q={city}&appid={API_Weather}&units=metric&lang=ru"

    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(url, timeout=10) as response:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞
                if response.status != 200:
                    try:
                        error_data = await response.json()
                        error_msg = error_data.get('message', 'Unknown error')
                        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ API: {error_msg} (–∫–æ–¥ {response.status})")
                    except:
                        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: HTTP {response.status}")
                    return

                data = await response.json()

                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–∞–Ω–Ω—ã—Ö
                if 'main' not in data or 'weather' not in data:
                    await message.answer("‚ö†Ô∏è –ù–µ–ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞ –ø–æ–≥–æ–¥—ã")
                    return

        main = data["main"]
        weather = data["weather"][0]
        wind = data["wind"]

        temp = main["temp"]
        feels_like = main["feels_like"]
        weather_desc = weather_translation.get(
            weather["description"].lower(),
            weather["description"]
        )

        reply_text = (
            f"üåç <b>–ü–æ–≥–æ–¥–∞ –≤ {city.capitalize()}</b>\n\n"
            f"üå° <b>–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞:</b> {temp}¬∞C (–æ—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫ {feels_like}¬∞C)\n"
            f"‚òÅ <b>–°–æ—Å—Ç–æ—è–Ω–∏–µ:</b> {weather_desc.capitalize()}\n"
            f"üíß <b>–í–ª–∞–∂–Ω–æ—Å—Ç—å:</b> {main['humidity']}%\n"
            f"üìä <b>–î–∞–≤–ª–µ–Ω–∏–µ:</b> {main['pressure']} hPa\n"
            f"üå¨ <b>–í–µ—Ç–µ—Ä:</b> {wind['speed']} –º/—Å"
        )

        if temp <= 0:
            reply_text += "\n\n‚ùÑÔ∏è –û—á–µ–Ω—å —Ö–æ–ª–æ–¥–Ω–æ! –¢–µ–ø–ª–∞—è –∑–∏–º–Ω—è—è –æ–¥–µ–∂–¥–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞."
        elif 0 < temp <= 10:
            reply_text += "\n\nüß• –î–æ–≤–æ–ª—å–Ω–æ –ø—Ä–æ—Ö–ª–∞–¥–Ω–æ. –ù–∞–¥–µ–Ω—å—Ç–µ —Ç–µ–ø–ª—É—é –∫—É—Ä—Ç–∫—É."
        elif 10 < temp <= 18:
            reply_text += "\n\nüçÇ –ü—Ä–æ—Ö–ª–∞–¥–Ω–æ. –õ–µ–≥–∫–∞—è –∫—É—Ä—Ç–∫–∞ –∏–ª–∏ —Ç–µ–ø–ª—ã–π —Å–≤–∏—Ç–µ—Ä."
        elif 18 < temp <= 25:
            reply_text += "\n\nüëï –ö–æ–º—Ñ–æ—Ä—Ç–Ω–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞. –õ–µ–≥–∫–∞—è –æ–¥–µ–∂–¥–∞."
        else:
            reply_text += "\n\nüî• –ñ–∞—Ä–∫–æ! –õ–µ–≥–∫–∞—è –ª–µ—Ç–Ω—è—è –æ–¥–µ–∂–¥–∞."

        await message.answer(reply_text, parse_mode="HTML")


    except asyncio.TimeoutError:

        await message.answer("‚åõ –°–µ—Ä–≤–µ—Ä –ø–æ–≥–æ–¥—ã –Ω–µ –æ—Ç–≤–µ—Ç–∏–ª –≤–æ–≤—Ä–µ–º—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

    except aiohttp.ClientError as e:

        await message.answer(f"üåê –û—à–∏–±–∫–∞ —Å–µ—Ç–∏: {str(e)}")

    except Exception as e:
        await message.answer("‚ö†Ô∏è –í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞")
    finally:
        await state.clear()


@user.message(Command('birthday'))
async def Birthday(message:Message):
    await message.bot.send_chat_action(chat_id=message.from_user.id, action=ChatAction.TYPING)
    await asyncio.sleep(1)
    await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç:',reply_markup=kb.inline_DBBir_user)

@user.callback_query(F.data=="search_Bir")
async def handle_show_birthdays(callback: CallbackQuery):
    owner_id = callback.from_user.id
    birthdays = await get_birthdays(owner_id)

    if not birthdays:
        await callback.answer("–í—ã –µ—â–µ –Ω–µ –¥–æ–±–∞–≤–∏–ª–∏ –¥–Ω–∏ —Ä–æ–∂–¥–µ–Ω–∏—è", show_alert=True)
        return

    response = "–í–∞—à–∏ –¥–Ω–∏ —Ä–æ–∂–¥–µ–Ω–∏—è:\n"
    for bd in birthdays:
        response += f"- {bd['name_user']}: {bd['birth_date'].strftime('%d.%m.%Y')}\n"

    await callback.message.answer(response)
    await callback.answer()

@user.callback_query(F.data=="insert_Bir")
async def set_birh(callback:CallbackQuery,state:FSMContext):
    await callback.message.answer('–í–≤–µ–¥–∏—Ç–µ –∏–º—è –≤ —Ç–∞–∫–æ–º —Ñ–æ—Ä–º–∞—Ç–µ:\n\n'
                                  '–ò–º—è: –ò–≤–∞–Ω')
    await state.set_state(State.add_name)
    await callback.answer('')

@user.message(State.add_name)
async def reg_name(message:Message,state:FSMContext):
    name = message.text.strip()
    if not name.isalpha():
        await message.answer("–ò–º—è –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        return
    await state.update_data(name=name)
    await message.answer('–û—Ç–ª–∏—á–Ω–æ,—Ç–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è –≤ —Ç–∞–∫–æ–º —Ñ–æ—Ä–º–∞—Ç–µ:\n\n'
                         '–î–î/–ú–ú/–ì–ì–ì–ì (–Ω–∞–ø—Ä–∏–º–µ—Ä: 16/12/2007)')
    await state.set_state(State.add_date)

@user.message(State.add_date)
async def ref_date(message:Message,state:FSMContext):
    try:
        date_str = message.text.strip()
        birth_date = datetime.strptime(date_str, "%d/%m/%Y").date()

        if birth_date > datetime.now().date():
            await message.answer("–î–∞—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤ –±—É–¥—É—â–µ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
            return

        data = await state.get_data()
        name = data['name']

        await set_bir(
            name=name,
            birth_date=birth_date,
            owner_id=message.from_user.id,
        )

        await message.answer(
            f"‚úÖ –î–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è –¥–ª—è {name} ({birth_date.strftime('%d.%m.%Y')}) —Å–æ—Ö—Ä–∞–Ω–µ–Ω!"
        )
        await state.clear()

    except ValueError:
        await message.answer(
            "–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –î–î/–ú–ú/–ì–ì–ì–ì (–Ω–∞–ø—Ä–∏–º–µ—Ä: 16/12/2007)\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:"
        )


@user.message(Command('settings'))
async def user_set(message:Message):
    await message.bot.send_chat_action(chat_id=message.from_user.id, action=ChatAction.TYPING)
    await asyncio.sleep(1)
    await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç',reply_markup=kb.inline_main_user)

@user.message(Command('title'))
async def title(message:Message):
    await message.bot.send_chat_action(chat_id=message.from_user.id, action=ChatAction.TYPING)
    await asyncio.sleep(1)
    await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç:', reply_markup=kb.inline_Title)

@user.callback_query(F.data == 'insert_title')
async def insert_title(callback:CallbackQuery,state:FSMContext):
    await callback.message.edit_text('–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ—é –∑–∞–¥–∞—á—É')
    await state.set_state(State.add_title)
    await callback.answer('')

@user.message(State.add_title)
async def add_title(message:Message,state:FSMContext):
    user_title=message.text.strip()
    await state.update_data(user_title=user_title)
    await set_title(
        title_user=user_title,
        owner_id=message.chat.id
    )
    await message.answer('–ü–æ–∑–¥—Ä–∞–≤–ª—è—é, –∑–∞–¥–∞—á–∞ —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞')
    await state.clear()

@user.callback_query(F.data == 'search_title')
async def search_title(callback:CallbackQuery):
    owner_id = callback.from_user.id
    titile = await get_title(owner_id=owner_id)

    if not titile:
        await callback.answer("–í—ã –µ—â–µ –Ω–µ –¥–æ–±–∞–≤–∏–ª–∏ –∑–∞–¥–∞—á–∏",show_alert=True)
        return
    response = "–í–∞—à–∏ –∑–∞–¥–∞—á–∏:\n"
    for bd in titile:
        response += f"- {bd['title_user']}\n"

    await callback.message.answer(response)
    await callback.answer()








@user.callback_query(F.data == 'profile')
async def profile(callback:CallbackQuery):
    await callback.answer('')
    await callback.message.edit_text('–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–ø—É–Ω–∫—Ç',reply_markup=kb.profile)

@user.callback_query(F.data == 'username_set')
async def username_set(callback:CallbackQuery):
    await callback.answer('')
    await callback.message.edit_text(f'–í–∞—à–µ –∏–º—è: {callback.from_user.first_name}',reply_markup=kb.back)

@user.callback_query(F.data == 'userid_set')
async def userid_set(callback:CallbackQuery):
    await callback.answer('')
    await callback.message.edit_text(f'–í–∞—à id: {callback.from_user.id}', reply_markup=kb.back)

@user.callback_query(F.data == 'back_settings')
async def back_settings(callback:CallbackQuery):
    await callback.answer('')
    await callback.message.edit_text('–í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç',reply_markup=kb.inline_main_user)


@user.message(~F.text.startswith('/'))
async def wrong_command(message: Message):
    await message.answer(
        '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –∏–∑ —Å–ø–∏—Å–∫–∞!\n'
        '–í–≤–µ–¥–∏—Ç–µ /help –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥'
    )



